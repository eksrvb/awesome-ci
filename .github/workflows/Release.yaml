name: Publish Release

on:
  push:
    branches:
      - "main"
    paths-ignore:
      - "README.md"
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'


jobs:
  generate_infos:
    runs-on: ubuntu-latest
    outputs:
      releaseid: ${{ steps.tag.outputs.releaseid }}
      version: ${{ steps.tag.outputs.version }}
      pr: ${{ steps.tag.outputs.pr }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Setup awesome-ci
        uses: fullstack-devops/awesome-ci-action@main

      - name: Create release
        run: awesome-ci release create
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: collect infos
        id: tag
        shell: bash
        run: |
          echo "Building version: $(awesome-ci pr info -format 'version')"
          echo "::set-output name=version::$(awesome-ci pr info -format 'version')"
          echo "::set-output name=pr::$(awesome-ci pr info -format 'pr')"
          echo "::set-output name=releaseid::$ACI_RELEASE_ID"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: generate_infos
    strategy:
      matrix:
        arch: ["amd64", "arm64"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Build "${{ matrix.arch }}"
        run: go build -v -ldflags "-X main.version=${{ needs.generate_infos.outputs.version }}" -o out/awesome-ci_${{ needs.generate_infos.outputs.version }}_${{ matrix.arch }}
        env:
          GOOS: linux
          GOARCH: "${{ matrix.arch }}"

      - name: Cache build outputs
        uses: actions/cache@v2
        env:
          cache-name: cache-outputs-modules
        with:
          path: out/
          key: awesome-ci-${{ github.sha }}-${{ hashFiles('out/awesome-ci*') }}
          restore-keys: |
            awesome-ci-${{ github.sha }}
      #- name: Integration testing
      #  run: ./tools/test.sh ./out/awesome-ci_${ACI_NEXT_VERSION}_${{ matrix.arch }}
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create_release_test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup awesome-ci
        uses: fullstack-devops/awesome-ci-action@main

      - name: get cached build outputs
        uses: actions/cache@v2
        env:
          cache-name: cache-outputs-modules
        with:
          path: out/
          key: awesome-ci-${{ github.sha }}
      
      - name: Create Release
        run: awesome-ci release publish -releaseid ${{ needs.generate_tag.outputs.releaseid }} -upload "file=out/$ARTIFACT1,file=out/$ARTIFACT2"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACT1: awesome-ci_${{ needs.generate_tag.outputs.version }}_amd64
          ARTIFACT2: awesome-ci_${{ needs.generate_tag.outputs.version }}_arm64
